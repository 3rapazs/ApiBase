
///***********************************************************************************
///Copyright by [CDSCOM]
///On Version Template [1.0.0]
///On Version Program [1.0.0]
///Generated by: Threerapat
///Generated on: 12/03/2025 14:56:37
///***********************************************************************************
//#region Import
import express from "express";
import controller from "../../Controller/Security/ControllerUser"
import JsonReq from "../../Model/Shared/JsonReq";
import Result from "../../Model/Shared/Result";
import AuthenticateJWT from "../../Common/Auth";
import { Request, Response } from "express";
import ActionCode from "../../Constants/ActionCode";
import ProgramCode from "../../Constants/ProgramCode";

//#endregion Import

//#region Fields
const router = express.Router();
const bl = new controller();
const auth = new AuthenticateJWT();
const programCode: string = new ProgramCode().Depot
const actionCode = new ActionCode();

//#endregion Fields

//#region Document
router.get("/Document", (req: Request, res: Response) => {
  res.send(bl.Document());
});
//#endregion Document

//#region GetAll
router.post("/GetAll", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.GetAll(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});


//#endregion GetAll

// //#region Find
router.post("/Find", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.Find(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion Find

// //#region GetCount
router.post("/GetCount", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.GetCount(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion GetCount

// //#region GetPaged
router.post("/GetPaged", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.GetPaged(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion GetPaged

// //#region GetByAny
router.post("/GetByAny", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.GetByAny(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion GetByAny

// //#region DeleteWhere
router.delete("/DeleteWhere", auth.authenticateJWT(programCode, actionCode.Delete), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.DeleteWhere(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion DeleteWhere

// //#region Delete
router.delete("/Delete", auth.authenticateJWT(programCode, actionCode.Delete), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.Delete(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion Delete

// //#region GetRecord
router.post("/GetRecord", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.GetRecord(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion GetRecord

// //#region Insert
router.post("/Insert", auth.authenticateJWT(programCode, actionCode.Insert), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.Insert(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion Insert

// //#region Update
router.put("/Update", auth.authenticateJWT(programCode, actionCode.Update), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await bl.Update(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion Update

// //#region Update
router.post("/Login", async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    result = await bl.Login(req.body)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
// //#endregion Update


//#region Export Default
export default router;
//#endregion Export Default
