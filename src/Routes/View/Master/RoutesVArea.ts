
///***********************************************************************************
///Copyright by [CDSCOM]
///On Version Template [1.0.0]
///On Version Program [Beta]
///Generated by: Threerapat
///Generated on: 29/05/2025 13:32:26
///***********************************************************************************

//#region Import

import express from "express";
import Controller from "@/Controller/View/Master//ControllerVArea"
import JsonReq from "@/Model/Shared/JsonReq";
import Result from "@/Model/Shared/Result";
import AuthenticateJWT from "@/Common/Auth";
import { Request, Response } from "express";
import ActionCode from "@/Constants/ActionCode";
import ProgramCode from "@/Constants/ProgramCode";
import ConfigSys from "@/Config/ConfigSys";

//#endregion Import

//#region Fields

const router = express.Router();
const controller = new Controller();
const auth = new AuthenticateJWT();
const programCode: string = new ProgramCode().VArea
const actionCode = new ActionCode();

//#endregion Fields


//#region Document
router.get("/Document", (req: Request, res: Response) => {
  const key = req.query.key;
  if (key === ConfigSys.DocumentKey) {
    res.send(controller.Document());
  }
  else {
    res.send("Not Access");
  }

});
//#endregion Document

//#region GetAll
router.post("/GetAll", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await controller.GetAll(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});


//#endregion GetAll

//#region Find
router.post("/Find", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await controller.Find(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
//#endregion Find

//#region GetCount
router.post("/GetCount", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await controller.GetCount(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
//#endregion GetCount

//#region GetPaged
router.post("/GetPaged", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await controller.GetPaged(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
//#endregion GetPaged

//#region GetByAny
router.post("/GetByAny", auth.authenticateJWT(programCode, actionCode.Access), async (req: Request, res: Response): Promise<void> => {
  let result: Result
  try {
    let json: JsonReq = req.body;
    result = await controller.GetByAny(json)
    res.status(200).json(result)
  } catch (error) {
    res.status(400).json(result)
  }
});
//#endregion GetByAny


//#region Export Default
export default router;
//#endregion Export Default