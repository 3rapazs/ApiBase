
///***********************************************************************************
///Copyright by [CDSCOM]
///On Version Template [1.0.1]
///On Version Program [0111]
///Generated by: Threerapat
///Generated on: 30/05/2025 16:07:21
///***********************************************************************************

import ControllerBase from "@/Controller/ControllerBaseTable"
import sql from "mssql";
import Model from "@/Model/Master/BrokerModel"
import Schema from "@/Model/Shared/Schema";
import SchemaData from "@/Schema/Master/Broker.json"

class ControllerBrokerGenerated extends ControllerBase {

    constructor() {
        super();
        this.tableNameFull = "T_M_BROKER";
        this.tableName = "BROKER";
        this.tableNameNormal = "Broker";
        this.generateDate = "30/05/2025 16:07:21";
        this.generateBy = "Threerapat"
        this.version = "0111";
    }



    protected async GetRequestSave(json: any, state: string): Promise<any> {
        let entity: Model = json
        let request = await this.CreateRequest(entity.Tran);
        if (state === "edit") {
            request.input("ORIGINAL_BRK_TAX_NO", sql.NVarChar, entity.BrkTaxNo);
            request.input("ORIGINAL_BRK_BRN_NO", sql.Numeric(4, 0), entity.BrkBrnNo);
        } else {
        }
        request.input("BRK_TAX_NO", sql.NVarChar, entity.BrkTaxNo);
        request.input("BRK_BRN_NO", sql.Numeric(4, 0), entity.BrkBrnNo);
        request.input("BRK_NAME_ENG", sql.NVarChar, entity.BrkNameEng);
        request.input("BRK_NAME_THAI", sql.NVarChar, entity.BrkNameThai);
        request.input("STREET_AND_NO", sql.NVarChar, entity.StreetAndNo);
        request.input("DISTRICT_NAME", sql.NVarChar, entity.DistrictName);
        request.input("SUB_PROVINCE_NAME", sql.NVarChar, entity.SubProvinceName);
        request.input("PROVINCE_NAME", sql.NVarChar, entity.ProvinceName);
        request.input("POST_CODE", sql.NVarChar, entity.PostCode);
        request.input("EMAIL_ADDRESS", sql.NVarChar, entity.EmailAddress);
        request.input("TELEPHONE", sql.NVarChar, entity.Telephone);
        request.input("FAX", sql.NVarChar, entity.Fax);
        request.input("IS_DEFAULT_BROKER", sql.Bit, entity.IsDefaultBroker);
        request.input("NOTE1", sql.NVarChar, entity.Note1);
        request.input("CREATE_DATE", sql.DateTime, entity.CreateDate);
        request.input("CREATE_USER", sql.NVarChar, entity.CreateUser);
        request.input("UPDATE_DATE", sql.DateTime, entity.UpdateDate);
        request.input("UPDATE_USER", sql.NVarChar, entity.UpdateUser);
        request.input("AEOS_REFERENCE_NO", sql.NVarChar, entity.AeosReferenceNo);
        return request
    }

    protected async GetRequestByPrimaryKey(json: any): Promise<any> {
        let entity: Model = json
        let request = await this.CreateRequest(entity.Tran);
        request.input("BRK_TAX_NO", sql.NVarChar, entity.BrkTaxNo);
        request.input("BRK_BRN_NO", sql.Numeric(4, 0), entity.BrkBrnNo);
        return request
    }

    protected async GetEntitySave(json: any, data: any): Promise<{}> {
        let entity: Model = json
        return entity
    }

    protected async GetSchema(): Promise<Schema[]> {
        let data: any[] = SchemaData
        let listSchema: Schema[] = data
        return listSchema;
    }

    protected DocumentBody(): string {
        let documentText: string = super.DocumentBody();
        return documentText
    }

    protected GetColumnDocument(state: string): string {
        let columnDocument: string
        let entity: Model = new Model();
        const currentDate: Date = new Date();

        if (state === "edit") {
            entity.OriginalBrkTaxNo = "string";
            entity.OriginalBrkBrnNo = 0;
        }


        // Start All Column
        entity.BrkTaxNo = "string";
        entity.BrkBrnNo = 0;
        entity.BrkNameEng = "string";
        entity.BrkNameThai = "string";
        entity.StreetAndNo = "string";
        entity.DistrictName = "string";
        entity.SubProvinceName = "string";
        entity.ProvinceName = "string";
        entity.PostCode = "string";
        entity.EmailAddress = "string";
        entity.Telephone = "string";
        entity.Fax = "string";
        entity.IsDefaultBroker = false;
        entity.Note1 = "string";
        entity.CreateDate = currentDate;
        entity.CreateUser = "string";
        entity.UpdateDate = currentDate;
        entity.UpdateUser = "string";
        entity.AeosReferenceNo = "string";
        // End All Column
        columnDocument = JSON.stringify(entity)
        return columnDocument;
    }

    protected GetColumnDocumentPrimaryKey(): string {
        let columnDocument: string
        let entity: Model = new Model();
        // Start Primary Key
        entity.BrkTaxNo = "string";
        entity.BrkBrnNo = 0;
        //End Primary Key
        columnDocument = JSON.stringify(entity)
        return columnDocument
    }


}
export default ControllerBrokerGenerated;
