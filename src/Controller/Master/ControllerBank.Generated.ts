
///***********************************************************************************
///Copyright by [CDSCOM]
///On Version Template [1.0.1]
///On Version Program [0111]
///Generated by: Threerapat
///Generated on: 27/06/2025 14:56:39
///***********************************************************************************

import ControllerBase from "@/Controller/ControllerBaseTable"
import sql from "mssql";
import Model from "@/Model/Master/BankModel"
import Schema from "@/Model/Shared/Schema";
import SchemaData from "@/Schema/Master/Bank.json"

class ControllerBankGenerated extends ControllerBase {

    constructor() {
        super();
        this.tableNameFull = "T_M_BANK";
        this.tableName = "BANK";
        this.tableNameNormal = "Bank";
        this.generateDate = "27/06/2025 14:56:39";
        this.generateBy = "Threerapat"
        this.version = "0111";
    }

    protected async GetSchema(): Promise<Schema[]> {
        let data: any[] = SchemaData
        let listSchema: Schema[] = data
        return listSchema;
    }



    protected async GetRequestSave(json: any, state: string): Promise<any> {
        let entity: Model = json
        let request = await this.CreateRequest(entity.Tran);
        if (state === "edit") {
            request.input("ORIGINAL_BANK_CODE", sql.NChar, entity.BankCode);

        } else {
        }
        request.input("BANK_CODE", sql.NChar, entity.BankCode);
        request.input("BANK_NAME", sql.NVarChar, entity.BankName);
        request.input("CREATE_DATE", sql.DateTime, entity.CreateDate);
        request.input("CREATE_USER", sql.NVarChar, entity.CreateUser);
        request.input("UPDATE_DATE", sql.DateTime, entity.UpdateDate);
        request.input("UPDATE_USER", sql.NVarChar, entity.UpdateUser);
        return request
    }

    protected async GetRequestByPrimaryKey(json: any): Promise<any> {
        let entity: Model = json
        let request = await this.CreateRequest(entity.Tran);
        request.input("BANK_CODE", sql.NChar, entity.BankCode);
        return request
    }

    protected async GetEntitySave(json: any, data: any): Promise<{}> {
        let entity: Model = json
        return entity
    }

    protected DocumentBody(): string {
        let documentText: string = super.DocumentBody();
        return documentText
    }

    protected GetColumnDocument(state: string): string {
        let columnDocument: string
        let entity: Model = new Model();
        const currentDate: Date = new Date();
        
        if (state === "edit") {
        entity.OriginalBankCode = "string";
        }


        // Start All Column
        entity.BankCode = "string";
        entity.BankName = "string";
        entity.CreateDate = currentDate;
        entity.CreateUser = "string";
        entity.UpdateDate = currentDate;
        entity.UpdateUser = "string";
        // End All Column
        columnDocument = JSON.stringify(entity)
        return columnDocument;
    }

    protected GetColumnDocumentPrimaryKey(): string {
        let columnDocument: string
        let entity: Model = new Model();
        // Start Primary Key
        entity.BankCode = "string";
        //End Primary Key
        columnDocument = JSON.stringify(entity)
        return columnDocument
    }


}
export default ControllerBankGenerated;
